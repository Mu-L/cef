diff --git chrome/browser/profiles/off_the_record_profile_impl.cc chrome/browser/profiles/off_the_record_profile_impl.cc
index 078a4dbaddead1a13302eea898aad3976db5b163..5f1df8f894c7b7e3179e52117e523c111c7c8932 100644
--- chrome/browser/profiles/off_the_record_profile_impl.cc
+++ chrome/browser/profiles/off_the_record_profile_impl.cc
@@ -641,7 +641,9 @@ std::unique_ptr<Profile> Profile::CreateOffTheRecordProfile(
 #endif
   if (!profile)
     profile = std::make_unique<OffTheRecordProfileImpl>(parent, otr_profile_id);
-  profile->Init();
+  // With CEF we want to delay initialization.
+  if (!otr_profile_id.IsUniqueForCEF())
+    profile->Init();
   return std::move(profile);
 }
 
diff --git chrome/browser/profiles/profile.cc chrome/browser/profiles/profile.cc
index 546c9c2792c7080932c7d9a13b223b76e7e06ad4..29f0f71f60265cc3a2eed705274c3f3a9de4f175 100644
--- chrome/browser/profiles/profile.cc
+++ chrome/browser/profiles/profile.cc
@@ -92,6 +92,7 @@ std::set<content::BrowserContext*>& GetProfileInstances() {
 
 namespace {
 
+const char kCEFOTRProfileIDPrefix[] = "CEF::BrowserContext";
 const char kDevToolsOTRProfileIDPrefix[] = "Devtools::BrowserContext";
 const char kMediaRouterOTRProfileIDPrefix[] = "MediaRouter::Presentation";
 const char kTestOTRProfileIDPrefix[] = "Test::OTR";
@@ -112,6 +113,8 @@ bool Profile::OTRProfileID::AllowsBrowserWindows() const {
   // DevTools::BrowserContext, MediaRouter::Presentation, and
   // CaptivePortal::Signin are exceptions to this ban.
   if (*this == PrimaryID() || IsDevTools() ||
+      base::StartsWith(profile_id_, kCEFOTRProfileIDPrefix,
+                       base::CompareCase::SENSITIVE) ||
       base::StartsWith(profile_id_, kMediaRouterOTRProfileIDPrefix,
                        base::CompareCase::SENSITIVE)) {
     return true;
@@ -152,6 +155,16 @@ Profile::OTRProfileID Profile::OTRProfileID::CreateUnique(
       base::Uuid::GenerateRandomV4().AsLowercaseString().c_str()));
 }
 
+// static
+Profile::OTRProfileID Profile::OTRProfileID::CreateUniqueForCEF() {
+  return CreateUnique(kCEFOTRProfileIDPrefix);
+}
+
+bool Profile::OTRProfileID::IsUniqueForCEF() const {
+  return base::StartsWith(profile_id_, kCEFOTRProfileIDPrefix,
+                          base::CompareCase::SENSITIVE);
+}
+
 // static
 Profile::OTRProfileID Profile::OTRProfileID::CreateUniqueForDevTools() {
   return CreateUnique(kDevToolsOTRProfileIDPrefix);
diff --git chrome/browser/profiles/profile.h chrome/browser/profiles/profile.h
index 806ecfcc64489871cdafef3ee375cf00f83097ef..6ab6734c851e4d610945051fc5965bf92b8b06e4 100644
--- chrome/browser/profiles/profile.h
+++ chrome/browser/profiles/profile.h
@@ -93,6 +93,10 @@ class Profile : public content::BrowserContext {
     // be applicable to run. Please see crbug.com/1098697#c3 for more details.
     static OTRProfileID CreateUnique(const std::string& profile_id_prefix);
 
+    // Creates a unique OTR profile id to be used for CEF browser contexts.
+    static OTRProfileID CreateUniqueForCEF();
+    bool IsUniqueForCEF() const;
+
     // Creates a unique OTR profile id to be used for DevTools browser contexts.
     static OTRProfileID CreateUniqueForDevTools();
 
@@ -501,6 +505,9 @@ class Profile : public content::BrowserContext {
   static Profile* FromJavaObject(const jni_zero::JavaRef<jobject>& obj);
   jni_zero::ScopedJavaLocalRef<jobject> GetJavaObject() const;
 #endif  // BUILDFLAG(IS_ANDROID)
+
+  void NotifyOffTheRecordProfileCreated(Profile* off_the_record);
+
  protected:
   // Creates an OffTheRecordProfile which points to this Profile.
   static std::unique_ptr<Profile> CreateOffTheRecordProfile(
@@ -512,7 +519,6 @@ class Profile : public content::BrowserContext {
   static PrefStore* CreateExtensionPrefStore(Profile*,
                                              bool incognito_pref_store);
 
-  void NotifyOffTheRecordProfileCreated(Profile* off_the_record);
   void NotifyProfileInitializationComplete();
 
   // Returns whether the user has signed in this profile to an account.
diff --git chrome/browser/profiles/profile_impl.cc chrome/browser/profiles/profile_impl.cc
index d1dc8ca618fba98373ca79b13afed70290347800..dc81984dc236932e69feb8330e062dd6884dc6f3 100644
--- chrome/browser/profiles/profile_impl.cc
+++ chrome/browser/profiles/profile_impl.cc
@@ -41,6 +41,7 @@
 #include "base/version.h"
 #include "build/build_config.h"
 #include "build/chromeos_buildflags.h"
+#include "cef/libcef/features/features.h"
 #include "chrome/browser/background/background_contents_service_factory.h"
 #include "chrome/browser/background_fetch/background_fetch_delegate_factory.h"
 #include "chrome/browser/background_fetch/background_fetch_delegate_impl.h"
@@ -235,6 +236,10 @@
 #include "chrome/browser/background/extensions/background_mode_manager.h"
 #endif
 
+#if BUILDFLAG(ENABLE_CEF)
+#include "cef/libcef/browser/prefs/pref_names.h"
+#endif
+
 #if BUILDFLAG(ENABLE_EXTENSIONS_CORE)
 #include "chrome/browser/extensions/chrome_content_browser_client_extensions_part.h"
 #include "chrome/browser/extensions/extension_special_storage_policy.h"
@@ -276,6 +281,12 @@ class ScopedAllowBlockingForProfile : public base::ScopedAllowBlocking {};
 
 namespace {
 
+#if BUILDFLAG(ENABLE_CEF)
+BASE_FEATURE(kStorageNotificationService,
+             "StorageNotificationService",
+             base::FEATURE_ENABLED_BY_DEFAULT);
+#endif
+
 #if BUILDFLAG(ENABLE_SESSION_SERVICE)
 // Delay before we explicitly create the SessionService.
 static constexpr base::TimeDelta kCreateSessionServiceDelay =
@@ -1005,7 +1016,9 @@ Profile* ProfileImpl::GetOffTheRecordProfile(const OTRProfileID& otr_profile_id,
 
   otr_profiles_[otr_profile_id] = std::move(otr_profile);
 
-  NotifyOffTheRecordProfileCreated(raw_otr_profile);
+  // With CEF we want to delay initialization.
+  if (!otr_profile_id.IsUniqueForCEF())
+    NotifyOffTheRecordProfileCreated(raw_otr_profile);
 
   return raw_otr_profile;
 }
@@ -1348,6 +1361,12 @@ ProfileImpl::GetStorageNotificationService() {
 #if BUILDFLAG(IS_ANDROID)
   return nullptr;
 #else
+#if BUILDFLAG(ENABLE_CEF)
+  if (!base::FeatureList::IsEnabled(kStorageNotificationService) ||
+      !GetPrefs()->GetBoolean(cef::prefs::kEnableStorageNotificationService)) {
+    return nullptr;
+  }
+#endif
   return StorageNotificationServiceFactory::GetForBrowserContext(this);
 #endif
 }
