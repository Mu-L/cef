diff --git base/win/dark_mode_support.cc base/win/dark_mode_support.cc
index daecebb5070705c1eb5281a3a7df4ace6b89c119..aed51c2e6b06e3527bd6c2003e4b6a82ee4469e5 100644
--- base/win/dark_mode_support.cc
+++ base/win/dark_mode_support.cc
@@ -7,6 +7,7 @@
 #include <windows.h>
 
 #include "base/check.h"
+#include "base/command_line.h"
 #include "base/native_library.h"
 #include "base/win/win_util.h"
 #include "base/win/windows_version.h"
@@ -85,11 +86,20 @@ const DarkModeSupport& GetDarkModeSupport() {
   return dark_mode_support;
 }
 
+bool IsForcedLightMode() {
+  static bool kIsForcedLightMode =
+      base::CommandLine::ForCurrentProcess()->HasSwitch(
+          "force-light-mode");
+  return kIsForcedLightMode;
+}
+
 }  // namespace
 
 namespace base::win {
 
 bool IsDarkModeAvailable() {
+  if (IsForcedLightMode())
+    return false;
   auto& dark_mode_support = GetDarkModeSupport();
   return (dark_mode_support.allow_dark_mode_for_app ||
           dark_mode_support.set_preferred_app_mode) &&
diff --git chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.cc chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.cc
index 8eca0f15ad724bfe7b3f83b361984f581f79c347..214eb82df050d5b41efffb8aef44d8ba71e785ae 100644
--- chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.cc
+++ chrome/browser/ui/views/chrome_browser_main_extra_parts_views_linux.cc
@@ -58,7 +58,10 @@ void ChromeBrowserMainExtraPartsViewsLinux::ToolkitInitialized() {
     ui::CursorFactory::GetInstance()->ObserveThemeChanges();
   }
 #if BUILDFLAG(USE_DBUS)
-  dark_mode_manager_ = std::make_unique<ui::DarkModeManagerLinux>();
+  if (!ui::NativeTheme::IsForcedDarkMode() &&
+      !ui::NativeTheme::IsForcedLightMode()) {
+    dark_mode_manager_ = std::make_unique<ui::DarkModeManagerLinux>();
+  }
 #endif
 }
 
diff --git ui/native_theme/native_theme.cc ui/native_theme/native_theme.cc
index e09cf382304fa258f3d8bca4fae116301076a011..3331c751bd8d6f909c575d6efccc940122157e2a 100644
--- ui/native_theme/native_theme.cc
+++ ui/native_theme/native_theme.cc
@@ -281,6 +281,8 @@ void NativeTheme::NotifyOnNativeThemeUpdated() {
 
   NotifyOnNativeThemeUpdatedImpl();
 
+  color_provider_manager.AfterNativeThemeUpdated();
+
   RecordNumColorProvidersInitializedDuringOnNativeThemeUpdated(
       color_provider_manager.num_providers_initialized() -
       initial_providers_initialized);
@@ -368,6 +370,13 @@ bool NativeTheme::IsForcedDarkMode() {
   return kIsForcedDarkMode;
 }
 
+bool NativeTheme::IsForcedLightMode() {
+  static bool kIsForcedLightMode =
+      base::CommandLine::ForCurrentProcess()->HasSwitch(
+          "force-light-mode");
+  return kIsForcedLightMode;
+}
+
 bool NativeTheme::IsForcedHighContrast() {
   static bool kIsForcedHighContrast =
       base::CommandLine::ForCurrentProcess()->HasSwitch(
@@ -581,8 +590,13 @@ ColorProviderKey::ForcedColors NativeTheme::CalculateForcedColors() const {
 
 NativeTheme::PreferredColorScheme NativeTheme::CalculatePreferredColorScheme()
     const {
-  return IsForcedDarkMode() ? PreferredColorScheme::kDark
-                            : OsSettingsProvider::Get().PreferredColorScheme();
+  if (IsForcedDarkMode()) {
+    return PreferredColorScheme::kDark;
+  }
+  if (IsForcedLightMode()) {
+    return PreferredColorScheme::kLight;
+  }
+  return OsSettingsProvider::Get().PreferredColorScheme();
 }
 
 NativeTheme::PreferredContrast NativeTheme::CalculatePreferredContrast() const {
diff --git ui/native_theme/native_theme.h ui/native_theme/native_theme.h
index d8c168edc6c92c8094bb37e4ac1eb703d9d1dc85..ef1373c4d9a224db0b31cbd3ea5566b6a372b6d7 100644
--- ui/native_theme/native_theme.h
+++ ui/native_theme/native_theme.h
@@ -531,13 +531,16 @@ class COMPONENT_EXPORT(NATIVE_THEME) NativeTheme {
     caret_blink_interval_ = caret_blink_interval;
   }
 
- protected:
-  explicit NativeTheme(SystemTheme system_theme = SystemTheme::kDefault);
-  virtual ~NativeTheme();
+  // Whether light mode is forced via command-line flag.
+  static bool IsForcedLightMode();
 
   // Whether dark mode is forced via command-line flag.
   static bool IsForcedDarkMode();
 
+ protected:
+  explicit NativeTheme(SystemTheme system_theme = SystemTheme::kDefault);
+  virtual ~NativeTheme();
+
   // Whether high contrast is forced via command-line flag.
   static bool IsForcedHighContrast();
 
