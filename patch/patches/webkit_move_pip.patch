diff --git third_party/blink/public/web/web_view.h third_party/blink/public/web/web_view.h
index c8d27cfee8ef3fe244291f4667b59df1037c359b..a3fce5f381cd369368eab15187dc153957e9fcb0 100644
--- third_party/blink/public/web/web_view.h
+++ third_party/blink/public/web/web_view.h
@@ -475,6 +475,11 @@ class BLINK_EXPORT WebView {
   virtual void SetPageAttributionSupport(
       network::mojom::AttributionSupport support) = 0;
 
+  // Sets whether to allow the use of JavaScript moveTo/By() and resizeTo/By()
+  // (without user activation) with Document picture-in-picture popups.
+  virtual void SetMovePictureInPictureEnabled(bool enabled) = 0;
+  virtual bool MovePictureInPictureEnabled() const = 0;
+
  protected:
   ~WebView() = default;
 };
diff --git third_party/blink/renderer/core/exported/web_view_impl.h third_party/blink/renderer/core/exported/web_view_impl.h
index 5c8a5d7f9b675a460740643fc26d778a08ef7112..4c86829ee57febf46b4bbd71b32f79fa4465bd55 100644
--- third_party/blink/renderer/core/exported/web_view_impl.h
+++ third_party/blink/renderer/core/exported/web_view_impl.h
@@ -323,6 +323,13 @@ class CORE_EXPORT WebViewImpl final : public WebView,
   void UpdateColorProviders(
       const ColorProviderColorMaps& color_provider_colors) override;
 
+  void SetMovePictureInPictureEnabled(bool enabled) override {
+    move_pip_enabled_ = enabled;
+  }
+  bool MovePictureInPictureEnabled() const override {
+    return move_pip_enabled_;
+  }
+
   void DispatchPersistedPageshow(base::TimeTicks navigation_start);
   void DispatchPagehide(mojom::blink::PagehideDispatch pagehide_dispatch);
   void HookBackForwardCacheEviction(bool hook);
@@ -1010,6 +1017,8 @@ class CORE_EXPORT WebViewImpl final : public WebView,
   // CSS property.
   bool supports_draggable_regions_ = false;
 
+  bool move_pip_enabled_ = false;
+
   // All the registered observers.
   base::ObserverList<WebViewObserver> observers_;
 };
diff --git third_party/blink/renderer/core/frame/local_dom_window.cc third_party/blink/renderer/core/frame/local_dom_window.cc
index 23a95863dc888a9ffb4b09c2b034665ef1186f7c..34a861b32425fd809b933d0df659f4d8b842c60c 100644
--- third_party/blink/renderer/core/frame/local_dom_window.cc
+++ third_party/blink/renderer/core/frame/local_dom_window.cc
@@ -52,6 +52,7 @@
 #include "third_party/blink/public/platform/task_type.h"
 #include "third_party/blink/public/platform/web_string.h"
 #include "third_party/blink/public/web/web_picture_in_picture_window_options.h"
+#include "third_party/blink/public/web/web_view.h"
 #include "third_party/blink/renderer/bindings/core/v8/binding_security.h"
 #include "third_party/blink/renderer/bindings/core/v8/capture_source_location.h"
 #include "third_party/blink/renderer/bindings/core/v8/isolated_world_csp.h"
@@ -111,6 +112,7 @@
 #include "third_party/blink/renderer/core/frame/settings.h"
 #include "third_party/blink/renderer/core/frame/viewport_data.h"
 #include "third_party/blink/renderer/core/frame/visual_viewport.h"
+#include "third_party/blink/renderer/core/frame/web_local_frame_impl.h"
 #include "third_party/blink/renderer/core/html/custom/custom_element_registry.h"
 #include "third_party/blink/renderer/core/html/fenced_frame/fence.h"
 #include "third_party/blink/renderer/core/html/forms/form_controller.h"
@@ -1995,8 +1997,9 @@ void LocalDOMWindow::moveBy(int x, int y) const {
     return;
   }
 
-  if (IsPictureInPictureWindow())
+  if (IsPictureInPictureWindow() && !MovePictureInPictureEnabled()) {
     return;
+  }
 
   LocalFrame* frame = GetFrame();
   Page* page = frame->GetPage();
@@ -2016,8 +2019,9 @@ void LocalDOMWindow::moveTo(int x, int y) const {
     return;
   }
 
-  if (IsPictureInPictureWindow())
+  if (IsPictureInPictureWindow() && !MovePictureInPictureEnabled()) {
     return;
+  }
 
   LocalFrame* frame = GetFrame();
   Page* page = frame->GetPage();
@@ -2040,7 +2044,8 @@ void LocalDOMWindow::resizeBy(int x,
   }
 
   if (IsPictureInPictureWindow()) {
-    if (!LocalFrame::ConsumeTransientUserActivation(GetFrame())) {
+    if (!MovePictureInPictureEnabled() &&
+        !LocalFrame::ConsumeTransientUserActivation(GetFrame())) {
       exception_state.ThrowDOMException(
           DOMExceptionCode::kNotAllowedError,
           "resizeBy() requires user activation in document picture-in-picture");
@@ -2068,7 +2073,8 @@ void LocalDOMWindow::resizeTo(int width,
   }
 
   if (IsPictureInPictureWindow()) {
-    if (!LocalFrame::ConsumeTransientUserActivation(GetFrame())) {
+    if (!MovePictureInPictureEnabled() &&
+        !LocalFrame::ConsumeTransientUserActivation(GetFrame())) {
       exception_state.ThrowDOMException(
           DOMExceptionCode::kNotAllowedError,
           "resizeTo() requires user activation in document picture-in-picture");
@@ -2538,6 +2544,12 @@ DOMWindow* LocalDOMWindow::openPictureInPictureWindow(
       To<LocalDOMWindow>(result.frame->DomWindow());
   pip_dom_window->SetIsPictureInPictureWindow();
 
+  if (WebLocalFrameImpl::FromFrame(entered_window->GetFrame())
+          ->View()
+          ->MovePictureInPictureEnabled()) {
+    pip_dom_window->SetMovePictureInPictureEnabled(true);
+  }
+
   // Ensure that we're using the same compatibility mode as the opener document.
   pip_dom_window->document()->SetCompatibilityMode(
       entered_window->document()->GetCompatibilityMode());
diff --git third_party/blink/renderer/core/frame/local_dom_window.h third_party/blink/renderer/core/frame/local_dom_window.h
index e4e4738182c279d7917e012a6f023f063e37ebf1..dc1c50533c3df8d174c08f123fbdca5152244672 100644
--- third_party/blink/renderer/core/frame/local_dom_window.h
+++ third_party/blink/renderer/core/frame/local_dom_window.h
@@ -586,6 +586,11 @@ class CORE_EXPORT LocalDOMWindow final : public DOMWindow,
 
   void SetIsPictureInPictureWindow();
 
+  void SetMovePictureInPictureEnabled(bool enabled) {
+    move_pip_enabled_ = enabled;
+  }
+  bool MovePictureInPictureEnabled() const { return move_pip_enabled_; }
+
   // Return the viewport size including scrollbars.
   gfx::Size GetViewportSize() const;
 
@@ -692,6 +697,8 @@ class CORE_EXPORT LocalDOMWindow final : public DOMWindow,
   // https://wicg.github.io/document-picture-in-picture/
   bool is_picture_in_picture_window_ = false;
 
+  bool move_pip_enabled_ = false;
+
   // Records this window's Storage Access API status. It cannot be downgraded.
   net::StorageAccessApiStatus storage_access_api_status_ =
       net::StorageAccessApiStatus::kNone;
