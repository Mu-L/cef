diff --git ui/display/screen.cc ui/display/screen.cc
index 111b751eb970e528a9cc7e94a3a0e941bc98abc5..e1eb1f73e6cca44c89b7214b092f22a61cd29f9a 100644
--- ui/display/screen.cc
+++ ui/display/screen.cc
@@ -104,13 +104,13 @@ base::TimeDelta Screen::CalculateIdleTime() const {
 gfx::Rect Screen::ScreenToDIPRectInWindow(gfx::NativeWindow window,
                                           const gfx::Rect& screen_rect) const {
   float scale = GetDisplayNearestWindow(window).device_scale_factor();
-  return ScaleToEnclosingRect(screen_rect, 1.0f / scale);
+  return ScaleToRoundedRect(screen_rect, 1.0f / scale);
 }
 
 gfx::Rect Screen::DIPToScreenRectInWindow(gfx::NativeWindow window,
                                           const gfx::Rect& dip_rect) const {
   float scale = GetDisplayNearestWindow(window).device_scale_factor();
-  return ScaleToEnclosingRect(dip_rect, scale);
+  return ScaleToRoundedRect(dip_rect, scale);
 }
 
 bool Screen::GetDisplayWithDisplayId(int64_t display_id,
diff --git ui/display/win/screen_win.cc ui/display/win/screen_win.cc
index f7072e2951c0e7504deaf4e21eec172002de80ba..faad27c76d2941f9b936763e5967cb1b907de66e 100644
--- ui/display/win/screen_win.cc
+++ ui/display/win/screen_win.cc
@@ -703,7 +703,7 @@ gfx::Rect ScreenWin::ScreenToDIPRect(HWND hwnd,
       gfx::PointF(pixel_bounds.origin()), screen_win_display));
   const float scale_factor =
       1.0f / screen_win_display.display().device_scale_factor();
-  return {origin, ScaleToEnclosingRect(pixel_bounds, scale_factor).size()};
+  return {origin, ScaleToRoundedRect(pixel_bounds, scale_factor).size()};
 }
 
 gfx::Rect ScreenWin::DIPToScreenRect(HWND hwnd,
@@ -718,7 +718,7 @@ gfx::Rect ScreenWin::DIPToScreenRect(HWND hwnd,
   const gfx::Point origin =
       display::win::DIPToScreenPoint(dip_bounds.origin(), screen_win_display);
   const float scale_factor = screen_win_display.display().device_scale_factor();
-  return {origin, ScaleToEnclosingRect(dip_bounds, scale_factor).size()};
+  return {origin, ScaleToRoundedRect(dip_bounds, scale_factor).size()};
 }
 
 gfx::Rect ScreenWin::ClientToDIPRect(HWND hwnd,
