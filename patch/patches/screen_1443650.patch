diff --git ui/display/screen.cc ui/display/screen.cc
index ee5ae0e83a6c9e7525d60a853caef6adf56721c8..6d14e500eb7be9f65633feb12f92580b5d725eeb 100644
--- ui/display/screen.cc
+++ ui/display/screen.cc
@@ -109,13 +109,13 @@ base::TimeDelta Screen::CalculateIdleTime() const {
 gfx::Rect Screen::ScreenToDIPRectInWindow(gfx::NativeWindow window,
                                           const gfx::Rect& screen_rect) const {
   float scale = GetDisplayNearestWindow(window).device_scale_factor();
-  return ScaleToEnclosingRect(screen_rect, 1.0f / scale);
+  return ScaleToRoundedRect(screen_rect, 1.0f / scale);
 }
 
 gfx::Rect Screen::DIPToScreenRectInWindow(gfx::NativeWindow window,
                                           const gfx::Rect& dip_rect) const {
   float scale = GetDisplayNearestWindow(window).device_scale_factor();
-  return ScaleToEnclosingRect(dip_rect, scale);
+  return ScaleToRoundedRect(dip_rect, scale);
 }
 
 bool Screen::GetDisplayWithDisplayId(int64_t display_id,
diff --git ui/display/win/screen_win.cc ui/display/win/screen_win.cc
index 399591582fa55f870534f7d57b13399c31a0dbf4..8832a044e1cc521e98208f2100e93a703a7e421a 100644
--- ui/display/win/screen_win.cc
+++ ui/display/win/screen_win.cc
@@ -701,7 +701,7 @@ gfx::Rect ScreenWin::ScreenToDIPRect(HWND hwnd,
       gfx::PointF(pixel_bounds.origin()), screen_win_display));
   const float scale_factor =
       1.0f / screen_win_display.display().device_scale_factor();
-  return {origin, ScaleToEnclosingRect(pixel_bounds, scale_factor).size()};
+  return {origin, ScaleToRoundedRect(pixel_bounds, scale_factor).size()};
 }
 
 gfx::Rect ScreenWin::DIPToScreenRect(HWND hwnd,
@@ -716,7 +716,7 @@ gfx::Rect ScreenWin::DIPToScreenRect(HWND hwnd,
   const gfx::Point origin =
       display::win::DIPToScreenPoint(dip_bounds.origin(), screen_win_display);
   const float scale_factor = screen_win_display.display().device_scale_factor();
-  return {origin, ScaleToEnclosingRect(dip_bounds, scale_factor).size()};
+  return {origin, ScaleToRoundedRect(dip_bounds, scale_factor).size()};
 }
 
 gfx::Rect ScreenWin::ClientToDIPRect(HWND hwnd,
